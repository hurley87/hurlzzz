{"version":3,"sources":["zimme:active-route/lib/activeroute.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,KAAK,KAAK,IAAV;;AAAA,aAEA,GAAgB,SAAC,GAAD;AACd;AAAA;WACE,MAAM,GAAN,EAAW,KAAK,CAAC,KAAN,CAAY,MAAZ,EAAoB,MAApB,CAAX,EADF;GAAA;AAGE,IADI,cACJ;AAAA,UAAU,UAAM,aAAa,CAAC,eAApB,CAAV,CAHF;GADc;AAAA,CAFhB;;AAAA,mBAQA,GAAsB;AACpB,OAAK,OAAQ,2BAAb;AAAA,EACA,KAAK,OAAQ,eADb;AAEA,QAAuD,MAAM,EAA7D;AAAA,UAAU,UAAM,aAAa,CAAC,iBAApB,CAAV;GAHoB;AAAA,CARtB;;AAAA,aAaA,GACE;AAAA,qBACE,mDACA,yCAFF;AAAA,EAIA,iBAAiB,6CAJjB;CAdF;;AAAA,KAoBK,CAAC,MAAN,GAAmB,iBAAa,mBAAb,CApBnB;;AAAA,KAqBK,CAAC,MAAM,CAAC,GAAb,CACE;AAAA,eAAa,QAAb;AAAA,EACA,eAAe,IADf;AAAA,EAEA,eAAe,UAFf;CADF,CArBA;;AAAA,IA0BA,GAAO,SAAC,KAAD,EAAQ,OAAR;AACL;AAAA;AAAA,WAAO,KAAP;GAAA;AAEA,MAAG,KAAK,CAAC,IAAN,CAAW,OAAX,EAAoB,MAApB,CAAH;AACE,aAAS,KAAK,CAAC,MAAN,CAAa,OAAb,CAAT;AAAA,IACA,SAAS,SAAS,EADlB,CADF;GAAA,MAIK,IAAG,KAAK,CAAC,IAAN,CAAW,OAAX,EAAoB,MAApB,CAAH;AACH,QAAG,KAAK,CAAC,MAAM,CAAC,MAAb,CAAoB,eAApB,EAAqC,KAArC,CAAH;AACE,cAAQ,KAAK,CAAC,WAAN,EAAR;AAAA,MACA,UAAU,OAAO,CAAC,WAAR,EADV,CADF;KAAA;AAAA,IAIA,SAAS,UAAS,OAJlB,CADG;GANL;0BAaA,kBAAU,MAdL;AAAA,CA1BP;;AAAA,WA0CA,GAEE;AAAA,UAAQ;WACN,IAAC,UAAS,CAAC,KAAX,CAAiB,IAAjB,EAAuB,SAAvB,EADM;EAAA,CAAR;AAAA,EAGA,WAAW,SAAC,OAAD;AACT,QAAU,MAAM,CAAC,QAAjB;AAAA;KAAA;AAAA,IAEA,KAAK,CAAC,MAAM,CAAC,GAAb,CAAiB,OAAjB,CAFA,CADS;EAAA,CAHX;AAAA,EASA,MAAM,SAAC,SAAD;AACJ;AAAA;AAEA,QAAU,MAAM,CAAC,QAAjB;AAAA;KAFA;AAAA,IAIA,cAAc,SAAd,CAJA;AAMA,QAAG,EAAH;AACE,0IAA6C,CAAE,oCAA/C,CADF;KANA;AASA,QAAG,EAAH;;QACE,mBAAoB,EAAE,CAAC,UAAU,CAAC,YAAd;OADtB;KATA;WAYA,KAAK,gBAAL,EAAuB,SAAvB,EAbI;EAAA,CATN;AAAA,EAwBA,MAAM,SAAC,IAAD;AACJ;AAAA;AAEA,QAAU,MAAM,CAAC,QAAjB;AAAA;KAFA;AAAA,IAIA,cAAc,IAAd,CAJA;AAMA,QAAG,EAAH;AACE,mBAAa,EAAE,CAAC,MAAM,CAAC,OAAV,EAAb;AACA,+BAAiD,UAAU,CAAE,cAA7D;AAAA,2CAAc,UAAU,CAAE,QAAQ,CAAC,GAArB,EAA0B,CAAC,aAAzC;OAFF;KANA;AAUA,QAAG,EAAH;AACE,QAAE,CAAC,UAAU,CAAC,eAAd;;QACA,cAAe,EAAE,CAAC,UAAU,CAAC,OAAd,EAAuB,CAAC;OAFzC;KAVA;WAcA,KAAK,WAAL,EAAkB,IAAlB,EAfI;EAAA,CAxBN;CA5CF","file":"/packages/zimme_active-route.js","sourcesContent":["fr = ir = null\n\ncheckArgument = (arg) ->\n  try\n    check arg, Match.OneOf RegExp, String\n  catch error\n    throw new Error errorMessages.invalidArgument\n\ncheckRouterPackages = ->\n  fr = Package['meteorhacks:flow-router']\n  ir = Package['iron:router']\n  throw new Error errorMessages.noSupportedRouter unless ir or fr\n\nerrorMessages =\n  noSupportedRouter:\n    'No supported router installed. Please install ' +\n    'iron:router or meteorhacks:flow-router.'\n\n  invalidArgument: 'Invalid argument, must be String or RegExp.'\n\nshare.config = new ReactiveDict 'activeRouteConfig'\nshare.config.set\n  activeClass: 'active'\n  caseSensitive: true\n  disabledClass: 'disabled'\n\ntest = (value, pattern) ->\n  return false unless value\n\n  if Match.test pattern, RegExp\n    result = value.search pattern\n    result = result > -1\n\n  else if Match.test pattern, String\n    if share.config.equals 'caseSensitive', false\n      value = value.toLowerCase()\n      pattern = pattern.toLowerCase()\n\n    result = value is pattern\n\n  result ?= false\n\nActiveRoute =\n\n  config: ->\n    @configure.apply this, arguments\n\n  configure: (options) ->\n    return if Meteor.isServer\n\n    share.config.set options\n    return\n\n  name: (routeName) ->\n    checkRouterPackages()\n\n    return if Meteor.isServer\n\n    checkArgument routeName\n\n    if ir\n      currentRouteName = ir.Router.current()?.route?.getName?()\n\n    if fr\n      currentRouteName ?= fr.FlowRouter.getRouteName()\n\n    test currentRouteName, routeName\n\n  path: (path) ->\n    checkRouterPackages()\n\n    return if Meteor.isServer\n\n    checkArgument path\n\n    if ir\n      controller = ir.Router.current()\n      currentPath = controller?.location.get().path if controller?.route\n\n    if fr\n      fr.FlowRouter.watchPathChange()\n      currentPath ?= fr.FlowRouter.current().path\n\n    test currentPath, path\n"]}