{"version":3,"sources":["jchristman:collection-scroller/lib/collections.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,iD;;AAEA,sB;AACA,6B;AACA,6B;AACA,oB;AACA,gD;AACA,kD;AACA,sD;AACA,8D;AACA,gB;AACA,4D;AACA,oD;AACA,kD;AACA,4C;AACA,mE;AACA,oC;AACA,oF;AACA,gC;AACA,sF;AACA,yB;AACA,sC;AACA,qB;AACA,8E;AACA,4B;AACA,iC;;AAEA,4C;AACA,oD;AACA,uB;AACA,mB;;AAEA,iF;AACA,6E;AACA,gD;AACA,sD;AACA,mB;AACA,a;AACA,S;AACA,O;AACA,C;;AAEA,4D;AACA,kC;AACA,4B;AACA,K;AACA,wD;AACA,qC;AACA,2C;AACA,kF;AACA,0B;AACA,S;AACA,K;AACA,oE;AACA,qD;AACA,Y;AACA,yE;AACA,K;AACA,E","file":"/packages/jchristman:collection-scroller.js","sourcesContent":["_CS_Counts = new Meteor.Collection('_cs_counts');\n\nif (Meteor.isServer) {\n    var _publicationsMap = {}\n    var _pub_expiration = 10;\n    Meteor.methods({\n        _cs_createPublication : function(_src) {\n            var _collection = getCollection(_src);\n            if (_publicationsMap[_src] == undefined) {\n                _publicationsMap[_src] = (new Date).getTime();\n                \n                Meteor.publish(_src + '_count', function() {\n                    var countsStr = _src + '_count';\n                    var self = this, first = true;\n                    var count = function() {\n                        var thisCount = _collection.find().count();\n                        if (first) {\n                            self.added('_cs_counts', countsStr, {count: thisCount});\n                        } else {\n                            self.changed('_cs_counts', countsStr, {count: thisCount});\n                        }\n                        first = false;\n                    }\n                    var timeout = Meteor.setInterval(count, 1000); // every 1s\n                    count();\n                    self.ready();\n\n                    self.onStop(function() {\n                        Meteor.clearTimeout(timeout)\n                    });\n                });\n\n                Meteor.publish(_src, function(_offset, _limit, _sortVar, _sort) {\n                    var args = { skip : _offset, limit : _limit, sort : {} };\n                    args.sort[_sortVar] = _sort;\n                    return _collection.find({}, args);\n                });\n            }\n        }\n    });\n}\n\ngetCollection = function(collectionName, createIfNotExist) {\n    if(collectionName == \"users\"){\n        return Meteor.users;\n    }\n    var globalScope = Meteor.isClient ? window : global;\n    for(var property in globalScope){\n        var object = globalScope[property];\n        if(object instanceof Meteor.Collection && object._name == collectionName){\n            return object;\n        }\n    }\n    if (createIfNotExist != undefined && createIfNotExist == true) {\n        return new Meteor.Collection(collectionName);\n    } else {\n        throw Meteor.Error(500, \"No collection named \" + collectionName);\n    }\n};\n"]}