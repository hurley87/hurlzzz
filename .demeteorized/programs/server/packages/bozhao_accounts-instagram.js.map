{"version":3,"file":"/packages/bozhao:accounts-instagram.js","sources":["bozhao:accounts-instagram/instagram_server.js","bozhao:accounts-instagram/instagram.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,e;;AAEA,6D;;AAEA,yC;AACA,0C;AACA,+B;;AAEA,6E;;AAEA,U;AACA,6B;AACA,c;AACA,4C;AACA,uC;AACA,K;AACA,I;AACA,G;;AAEA,yC;AACA,mF;;AAEA,c;AACA,iD;;AAEA,e;AACA,O;AACA,yB;AACA,uD;AACA,iB;AACA,2B;AACA,qC;AACA,gE;AACA,yD;AACA,0C;AACA,S;AACA,S;;AAEA,4D;AACA,6B;AACA,6C;AACA,wD;AACA,+B;AACA,+B;AACA,iB;AACA,kG;AACA,6C;AACA,G;;AAEA,0B;AACA,E;;AAEA,4E;AACA,qE;AACA,E;;;;;;;;;;;;;;;;;;;ACtDA,4C;;AAEA,sB;AACA,2D;AACA,yC;AACA,sD;AACA,yB;AACA,qB;AACA,K;;AAEA,sG;AACA,4E;AACA,I;AACA,Q;AACA,iC;AACA,4C;AACA,oB;AACA,oC;AACA,qC;AACA,0C;AACA,K;AACA,K;AACA,C","sourcesContent":["Instagram = {};\n\nOauth.registerService('instagram', 2, null, function(query) {\n\n  var response = getTokenResponse(query);\n  var accessToken = response.access_token;\n  var identity = response.user;\n\n  var serviceData = _.extend(identity, {accessToken: response.access_token});\n\n  return {\n    serviceData: serviceData,\n    options: {\n      profile: { name: identity.full_name },\n      services: { instagram: identity }\n    }\n  };\n});\n\nvar getTokenResponse = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'instagram'});\n\n  if (!config)\n    throw new ServiceConfiguration.ConfigError();\n\n  var response;\n  try {\n    response = HTTP.post(\n      \"https://api.instagram.com/oauth/access_token\", {\n        params: {\n          code: query.code,\n          client_id: config.clientId,\n          redirect_uri: OAuth._redirectUri(\"instagram\", config),\n          client_secret: OAuth.openSecret(config.secret),\n          grant_type: 'authorization_code'\n        }\n      });\n\n    if (response.error) // if the http response was an error\n        throw response.error;\n    if (typeof response.content === \"string\")\n        response.content = JSON.parse(response.content);\n    if (response.content.error)\n        throw response.content;\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Instagram. \" + err.message),\n                   {response: err.response});\n  }\n\n  return response.content;\n};\n\nInstagram.retrieveCredential = function(credentialToken, credentialSecret) {\n  return Oauth.retrieveCredential(credentialToken, credentialSecret);\n};\n","Accounts.oauth.registerService('instagram');\n\nif (Meteor.isClient) {\n  Meteor.loginWithInstagram = function(options, callback) {\n    // support a callback without options\n    if (! callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Instagram.requestCredential(options, credentialRequestCompleteCallback);\n  };\n} else {\n  Accounts.addAutopublishFields({\n    forLoggedInUser: ['services.instagram'],\n    forOtherUsers: [\n      'services.instagram.username',\n      'services.instagram.full_name',\n      'services.instagram.profile_picture'\n    ]\n  });\n}\n"]}